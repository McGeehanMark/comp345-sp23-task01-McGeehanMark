package edu.ithaca.barr.bank;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


class BankAccountTest {

    @Test
    void getBalanceTest() {
        BankAccount bankAccount = new BankAccount("a@b.com", 200);
        assertEquals(200, bankAccount.getBalance(), 0.001);

        BankAccount bankAccountTwo = new BankAccount("mm---@.com", 300);
        assertEquals(300, bankAccountTwo.getBalance(), 0.001); //starting balance of 300


        BankAccount bankAccountThree = new BankAccount("mmcgeehan@@.com", 400);
        assertEquals(400, bankAccountThree.getBalance(), 0.001); //starting balance of 400
    }

    /**
     * @throws InsufficientFundsException
     */
    @Test
    void withdrawTest() throws InsufficientFundsException, IllegalArgumentException{
        BankAccount bankAccount = new BankAccount("a@b.com", 200); // the balance of this is bigger than 300
        //bankAccount.withdraw(100);

       // assertEquals(100, bankAccount.getBalance(), 0.001);
        assertThrows(InsufficientFundsException.class, () -> bankAccount.withdraw(300), "Balance exception thrown");
        assertThrows(InsufficientFundsException.class, () -> bankAccount.withdraw(400));
        assertThrows(InsufficientFundsException.class, () -> bankAccount.withdraw(233));

        bankAccount.withdraw(100);
        assertEquals(100, bankAccount.getBalance());
        bankAccount.withdraw(100);
        assertEquals(0, bankAccount.getBalance());//This will end at 0

        BankAccount bankAccountTwo = new BankAccount("mm---@.com", 300); 
        bankAccountTwo.withdraw(100);

        assertThrows(InsufficientFundsException.class, () -> bankAccountTwo.withdraw(303));
        assertThrows(InsufficientFundsException.class, () -> bankAccountTwo.withdraw(400));
        assertThrows(InsufficientFundsException.class, () -> bankAccountTwo.withdraw(650));

        bankAccountTwo.withdraw(100);
        assertEquals(200, bankAccountTwo.getBalance(), 0.001);
        //assertThrows(InsufficientFundsException.class, () -> bankAccountTwo.withdraw(300));
        bankAccountTwo.withdraw(50);
        assertEquals(150, bankAccountTwo.getBalance(), 0.001);
        bankAccountTwo.withdraw(50);
        assertEquals(100, bankAccountTwo.getBalance(), 0.001);


        BankAccount bankAccountThree = new BankAccount("mmcgeehan@@.com", 500);
        assertThrows(InsufficientFundsException.class, () -> bankAccountThree.withdraw(600));
        assertThrows(InsufficientFundsException.class, () -> bankAccountThree.withdraw(900));
        assertThrows(InsufficientFundsException.class, () -> bankAccountThree.withdraw(3443));
        bankAccountThree.withdraw(100);
        assertEquals(400, bankAccountThree.getBalance(), 0.001);//This will be 400
        bankAccountThree.withdraw(150);
        assertEquals(250, bankAccountThree.getBalance(), 0.001);//This will be 400
        
    }

    @Test
    void isEmailValidTest(){
        assertTrue(BankAccount.isEmailValid("a@b.com"));   // valid email address
        assertFalse( BankAccount.isEmailValid(""));         // empty string
        assertTrue(BankAccount.isEmailValid( "mm---@.com"));   // valid email address   
        assertTrue(BankAccount.isEmailValid( "mmcgeehan@@.com"));   // valid email address
        assertTrue(BankAccount.isEmailValid( "mmcgeehan@Ithaca.edu"));
        assertTrue(BankAccount.isEmailValid( "mmcgeehan424@gmail.com"));
        assertTrue(BankAccount.isEmailValid( "mmcgeehan211@gmail.com"));
        assertTrue(BankAccount.isEmailValid( "mmcgeehan@gmail.com"));
        assertFalse( BankAccount.isEmailValid("wwwew@@.com")); 
        assertFalse( BankAccount.isEmailValid("mmcgeehan@#gmail.com")); 
        assertFalse( BankAccount.isEmailValid("markmcgeehan")); 

    }

   @Test
   //throws IllegalArgumentException
    void amountValidTest(){
        //BankAccount bankAccount = new BankAccount( "a@c.com", 100);
        assertFalse(BankAccount.amountValid(-1.22));
        assertFalse(BankAccount.amountValid( -0.0001));
        assertFalse(BankAccount.amountValid(-23323332.33));
        assertFalse(BankAccount.amountValid( -0.0001));
        assertFalse(BankAccount.amountValid(-24.333211));
        assertFalse(BankAccount.amountValid( -33.333));//These numbers that are negative will turn into invalid
        assertFalse(BankAccount.amountValid(0)); //This will be invalid because it is invalid when it is 0
        assertFalse(BankAccount.amountValid(5.00));
        assertTrue(BankAccount.amountValid(43.23));
        assertTrue(BankAccount.amountValid(32.00));
        assertTrue(BankAccount.amountValid(21.3));
        assertTrue(BankAccount.amountValid(2.00));
        assertTrue(BankAccount.amountValid(7.22));//All of the positive numbers will turn into an valid ammounr

    }

    /**
     * @throws IllegalArgumentException
     */
    @Test
    //throws IllegalArgumentException, IllegalAccessException
    void depositTest(){
        BankAccount bankAccountTwo = new BankAccount("mm---@.com", 100);
        assertThrows(IllegalArgumentException.class, () -> bankAccountTwo.deposit(-123.9));
        assertThrows(IllegalAccessException.class, () -> bankAccountTwo.deposit(-90.00));
        assertThrows(IllegalAccessException.class, () -> bankAccountTwo.deposit(23.00));
        assertThrows(IllegalAccessException.class, () -> bankAccountTwo.deposit(2.34));

        bankAccountTwo.deposit(20);
        assertEquals( 200, bankAccountTwo.getBalance(), 0.001);
        bankAccountTwo.deposit(30);
        assertEquals( 100, bankAccountTwo.getBalance(), 0.001);
        bankAccountTwo.deposit(40);
        assertEquals( 100, bankAccountTwo.getBalance(), 0.001);


    }

/**
     *
     */
    //throws InsufficientFundsException, IllegalArgumentException
    // IllegalArgumentException
    @Test
    void transferTest() throws InsufficientFundsException {
        BankAccount bankAccount = new BankAccount("a@b.com", 300);
        BankAccount bankAccountTwo = new BankAccount("m@m.com", 200);
        
        assertThrows(IllegalArgumentException.class, () -> bankAccount.transfer(bankAccountTwo, -100));
        assertThrows(IllegalArgumentException.class, () -> bankAccount.transfer(bankAccountTwo, -50));
        assertThrows(IllegalArgumentException.class, () -> bankAccount.transfer(bankAccountTwo, -3232123));

        bankAccount.transfer(bankAccountTwo, 20);
        assertEquals(280.0, bankAccount.getBalance(), 0.001);
        assertEquals(220.0, bankAccountTwo.getBalance(), 0.001);
        bankAccountTwo.transfer(bankAccount, 70);
        assertEquals(350.0, bankAccount.getBalance(), 0.001);
        assertEquals(150.0, bankAccountTwo.getBalance(), 0.001);

        assertThrows(InsufficientFundsException.class, () -> bankAccount.transfer(bankAccountTwo, -100));
        assertThrows(InsufficientFundsException.class, () -> bankAccount.transfer(bankAccountTwo, -50));
        assertThrows(InsufficientFundsException.class, () -> bankAccount.transfer(bankAccountTwo, -23));
        assertThrows(InsufficientFundsException.class, () -> bankAccount.transfer(bankAccountTwo, -2344332));



       

        



    }

    @Test

    //mm---@.com
    //mmcgeehan@@.com
    void constructorTest() {
        BankAccount bankAccount = new BankAccount("a@b.com", 200);

        assertEquals("a@b.com", bankAccount.getEmail());
        assertEquals(200, bankAccount.getBalance(), 0.001);
        //check for exception thrown correctly
        assertEquals(IllegalArgumentException.class, new BankAccount("a@c.com", 100));

        BankAccount bankAccountTwo = new BankAccount("mm---@.com", 200);

        assertEquals("mm---@.com", bankAccountTwo.getEmail());
        assertEquals(200, bankAccountTwo.getBalance(), 0.001);
        //check for exception thrown correctly
        assertEquals(IllegalArgumentException.class, new BankAccount("mm---@.com", 100));


        BankAccount bankAccountThree = new BankAccount("mmcgeehan@@.com", 200);

        assertEquals("mmcgeehan@@.com", bankAccountThree.getEmail());
        assertEquals(200, bankAccountThree.getBalance(), 0.001);
        //check for exception thrown correctly
        assertEquals(IllegalArgumentException.class,  new BankAccount("mmcgeehan@@.com", 100));
    }

}
